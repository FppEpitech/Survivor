import { Binary, BindingPipe, Conditional, Interpolation, LiteralMap, LiteralPrimitive, Call, ParseTemplateOptions, PropertyRead, TmplAstBoundAttribute, TmplAstBoundText, TmplAstElement, TmplAstTemplate, TmplAstTextAttribute, TmplAstNode, TmplAstDeferredBlock, TmplAstDeferredBlockError, TmplAstDeferredBlockLoading, TmplAstDeferredBlockPlaceholder, TmplAstForLoopBlock, TmplAstForLoopBlockEmpty, TmplAstIfBlockBranch, TmplAstSwitchBlockCase, TmplAstIfBlock, TmplAstSwitchBlock } from '@angular/compiler';
import { TemplateExtractorConfig } from './types';
export declare function isTemplate(node: unknown): node is TmplAstTemplate;
export declare function isElement(node: unknown): node is TmplAstElement;
export declare function isBoundText(node: unknown): node is TmplAstBoundText;
export declare function isBoundAttribute(node: unknown): node is TmplAstBoundAttribute;
export declare function isTextAttribute(node: unknown): node is TmplAstTextAttribute;
export declare function isBindingPipe(ast: unknown): ast is BindingPipe;
export declare function isInterpolation(ast: unknown): ast is Interpolation;
export declare function isCall(ast: unknown): ast is Call;
export declare function isPropertyRead(ast: unknown): ast is PropertyRead;
export declare function isNgTemplateTag(node: TmplAstTemplate): boolean;
export declare function isLiteralExpression(expression: unknown): expression is LiteralPrimitive;
export declare function isLiteralMap(expression: unknown): expression is LiteralMap;
export declare function isConditionalExpression(expression: unknown): expression is Conditional;
export declare function isBinaryExpression(expression: unknown): expression is Binary;
export declare function parseTemplate(config: TemplateExtractorConfig, options?: ParseTemplateOptions): import("@angular/compiler").ParsedTemplate;
type GuardedType<T> = T extends (x: any) => x is infer U ? U : never;
export declare function isSupportedNode<Predicates extends any[]>(node: unknown, predicates: Predicates): node is GuardedType<Predicates[number]>;
type BlockNode = TmplAstDeferredBlockError | TmplAstDeferredBlockLoading | TmplAstDeferredBlockPlaceholder | TmplAstForLoopBlockEmpty | TmplAstIfBlockBranch | TmplAstSwitchBlockCase | TmplAstForLoopBlock | TmplAstDeferredBlock | TmplAstIfBlock | TmplAstSwitchBlock;
export declare function isBlockWithChildren(node: unknown): node is {
    children: TmplAstNode[];
};
export declare function isTmplAstForLoopBlock(node: unknown): node is TmplAstForLoopBlock;
export declare function isTmplAstDeferredBlock(node: unknown): node is TmplAstDeferredBlock;
export declare function isTmplAstIfBlock(node: unknown): node is TmplAstIfBlock;
export declare function isTmplAstSwitchBlock(node: unknown): node is TmplAstSwitchBlock;
export declare function isBlockNode(node: TmplAstNode): node is BlockNode;
export declare function resolveBlockChildNodes(node: BlockNode): TmplAstNode[];
export declare function resolveKeysFromLiteralMap(node: LiteralMap): string[];
export {};
