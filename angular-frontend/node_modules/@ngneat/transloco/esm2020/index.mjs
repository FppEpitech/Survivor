export { translate, translateObject, TranslocoService, } from './lib/transloco.service';
export { TranslocoDirective } from './lib/transloco.directive';
export { TranslocoPipe } from './lib/transloco.pipe';
export { TranslocoModule } from './lib/transloco.module';
export { TRANSLOCO_LOADER } from './lib/transloco.loader';
export { TRANSLOCO_CONFIG, defaultConfig, translocoConfig, } from './lib/transloco.config';
export { TRANSLOCO_TRANSPILER, DefaultTranspiler, FunctionalTranspiler, getFunctionArgs, } from './lib/transloco.transpiler';
export { TRANSLOCO_SCOPE } from './lib/transloco-scope';
export { TRANSLOCO_LOADING_TEMPLATE } from './lib/transloco-loading-template';
export { TRANSLOCO_LANG } from './lib/transloco-lang';
export { TestingLoader, TranslocoTestingModule, } from './lib/transloco-testing.module';
export { TemplateHandler } from './lib/template-handler';
export { TRANSLOCO_INTERCEPTOR, } from './lib/transloco.interceptor';
export { TRANSLOCO_FALLBACK_STRATEGY, DefaultFallbackStrategy, } from './lib/transloco-fallback-strategy';
export { TRANSLOCO_MISSING_HANDLER, } from './lib/transloco-missing-handler';
export { getBrowserCultureLang, getBrowserLang } from './lib/browser-lang';
export { getPipeValue, getLangFromScope, getScopeFromLang } from './lib/shared';
export * from './lib/types';
export * from './lib/helpers';
export { defaultProviders, provideTransloco, provideTranslocoConfig, provideTranslocoLoader, provideTranslocoScope, } from './lib/transloco.providers';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWJzL3RyYW5zbG9jby9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxlQUFlLEVBQ2YsZ0JBQWdCLEdBQ2pCLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQW1CLE1BQU0sd0JBQXdCLENBQUM7QUFDM0UsT0FBTyxFQUVMLGdCQUFnQixFQUNoQixhQUFhLEVBQ2IsZUFBZSxHQUNoQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFDTCxvQkFBb0IsRUFDcEIsaUJBQWlCLEVBRWpCLG9CQUFvQixFQUNwQixlQUFlLEdBRWhCLE1BQU0sNEJBQTRCLENBQUM7QUFDcEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQ0wsYUFBYSxFQUNiLHNCQUFzQixHQUV2QixNQUFNLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxlQUFlLEVBQVEsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQ0wscUJBQXFCLEdBRXRCLE1BQU0sNkJBQTZCLENBQUM7QUFDckMsT0FBTyxFQUNMLDJCQUEyQixFQUUzQix1QkFBdUIsR0FDeEIsTUFBTSxtQ0FBbUMsQ0FBQztBQUMzQyxPQUFPLEVBQ0wseUJBQXlCLEdBRzFCLE1BQU0saUNBQWlDLENBQUM7QUFDekMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDaEYsY0FBYyxhQUFhLENBQUM7QUFDNUIsY0FBYyxlQUFlLENBQUM7QUFDOUIsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsc0JBQXNCLEVBQ3RCLHNCQUFzQixFQUN0QixxQkFBcUIsR0FDdEIsTUFBTSwyQkFBMkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7XG4gIHRyYW5zbGF0ZSxcbiAgdHJhbnNsYXRlT2JqZWN0LFxuICBUcmFuc2xvY29TZXJ2aWNlLFxufSBmcm9tICcuL2xpYi90cmFuc2xvY28uc2VydmljZSc7XG5leHBvcnQgeyBUcmFuc2xvY29EaXJlY3RpdmUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28uZGlyZWN0aXZlJztcbmV4cG9ydCB7IFRyYW5zbG9jb1BpcGUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28ucGlwZSc7XG5leHBvcnQgeyBUcmFuc2xvY29Nb2R1bGUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28ubW9kdWxlJztcbmV4cG9ydCB7IFRSQU5TTE9DT19MT0FERVIsIFRyYW5zbG9jb0xvYWRlciB9IGZyb20gJy4vbGliL3RyYW5zbG9jby5sb2FkZXInO1xuZXhwb3J0IHtcbiAgVHJhbnNsb2NvQ29uZmlnLFxuICBUUkFOU0xPQ09fQ09ORklHLFxuICBkZWZhdWx0Q29uZmlnLFxuICB0cmFuc2xvY29Db25maWcsXG59IGZyb20gJy4vbGliL3RyYW5zbG9jby5jb25maWcnO1xuZXhwb3J0IHtcbiAgVFJBTlNMT0NPX1RSQU5TUElMRVIsXG4gIERlZmF1bHRUcmFuc3BpbGVyLFxuICBUcmFuc2xvY29UcmFuc3BpbGVyLFxuICBGdW5jdGlvbmFsVHJhbnNwaWxlcixcbiAgZ2V0RnVuY3Rpb25BcmdzLFxuICBUcmFuc2xvY29UcmFuc3BpbGVyRnVuY3Rpb24sXG59IGZyb20gJy4vbGliL3RyYW5zbG9jby50cmFuc3BpbGVyJztcbmV4cG9ydCB7IFRSQU5TTE9DT19TQ09QRSB9IGZyb20gJy4vbGliL3RyYW5zbG9jby1zY29wZSc7XG5leHBvcnQgeyBUUkFOU0xPQ09fTE9BRElOR19URU1QTEFURSB9IGZyb20gJy4vbGliL3RyYW5zbG9jby1sb2FkaW5nLXRlbXBsYXRlJztcbmV4cG9ydCB7IFRSQU5TTE9DT19MQU5HIH0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLWxhbmcnO1xuZXhwb3J0IHtcbiAgVGVzdGluZ0xvYWRlcixcbiAgVHJhbnNsb2NvVGVzdGluZ01vZHVsZSxcbiAgVHJhbnNsb2NvVGVzdGluZ09wdGlvbnMsXG59IGZyb20gJy4vbGliL3RyYW5zbG9jby10ZXN0aW5nLm1vZHVsZSc7XG5leHBvcnQgeyBUZW1wbGF0ZUhhbmRsZXIsIFZpZXcgfSBmcm9tICcuL2xpYi90ZW1wbGF0ZS1oYW5kbGVyJztcbmV4cG9ydCB7XG4gIFRSQU5TTE9DT19JTlRFUkNFUFRPUixcbiAgVHJhbnNsb2NvSW50ZXJjZXB0b3IsXG59IGZyb20gJy4vbGliL3RyYW5zbG9jby5pbnRlcmNlcHRvcic7XG5leHBvcnQge1xuICBUUkFOU0xPQ09fRkFMTEJBQ0tfU1RSQVRFR1ksXG4gIFRyYW5zbG9jb0ZhbGxiYWNrU3RyYXRlZ3ksXG4gIERlZmF1bHRGYWxsYmFja1N0cmF0ZWd5LFxufSBmcm9tICcuL2xpYi90cmFuc2xvY28tZmFsbGJhY2stc3RyYXRlZ3knO1xuZXhwb3J0IHtcbiAgVFJBTlNMT0NPX01JU1NJTkdfSEFORExFUixcbiAgVHJhbnNsb2NvTWlzc2luZ0hhbmRsZXIsXG4gIFRyYW5zbG9jb01pc3NpbmdIYW5kbGVyRGF0YSxcbn0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLW1pc3NpbmctaGFuZGxlcic7XG5leHBvcnQgeyBnZXRCcm93c2VyQ3VsdHVyZUxhbmcsIGdldEJyb3dzZXJMYW5nIH0gZnJvbSAnLi9saWIvYnJvd3Nlci1sYW5nJztcbmV4cG9ydCB7IGdldFBpcGVWYWx1ZSwgZ2V0TGFuZ0Zyb21TY29wZSwgZ2V0U2NvcGVGcm9tTGFuZyB9IGZyb20gJy4vbGliL3NoYXJlZCc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi90eXBlcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9oZWxwZXJzJztcbmV4cG9ydCB7IFxuICBkZWZhdWx0UHJvdmlkZXJzLFxuICBwcm92aWRlVHJhbnNsb2NvLFxuICBwcm92aWRlVHJhbnNsb2NvQ29uZmlnLFxuICBwcm92aWRlVHJhbnNsb2NvTG9hZGVyLFxuICBwcm92aWRlVHJhbnNsb2NvU2NvcGUsXG59IGZyb20gJy4vbGliL3RyYW5zbG9jby5wcm92aWRlcnMnO1xuIl19