import { TRANSLOCO_LOADER } from './transloco.loader';
import { TRANSLOCO_CONFIG } from './transloco.config';
import { TRANSLOCO_SCOPE } from './transloco-scope';
import { DefaultTranspiler, TRANSLOCO_TRANSPILER, } from './transloco.transpiler';
import { DefaultHandler, TRANSLOCO_MISSING_HANDLER, } from './transloco-missing-handler';
import { DefaultInterceptor, TRANSLOCO_INTERCEPTOR, } from './transloco.interceptor';
import { DefaultFallbackStrategy, TRANSLOCO_FALLBACK_STRATEGY, } from './transloco-fallback-strategy';
export const defaultProviders = [
    {
        provide: TRANSLOCO_TRANSPILER,
        useClass: DefaultTranspiler,
        deps: [TRANSLOCO_CONFIG],
    },
    {
        provide: TRANSLOCO_MISSING_HANDLER,
        useClass: DefaultHandler,
    },
    {
        provide: TRANSLOCO_INTERCEPTOR,
        useClass: DefaultInterceptor,
    },
    {
        provide: TRANSLOCO_FALLBACK_STRATEGY,
        useClass: DefaultFallbackStrategy,
        deps: [TRANSLOCO_CONFIG],
    },
];
export function provideTransloco(options) {
    const providers = [...defaultProviders];
    if (options.config) {
        providers.push(...provideTranslocoConfig(options.config));
    }
    if (options.loader) {
        providers.push(...provideTranslocoLoader(options.loader));
    }
    return providers;
}
export function provideTranslocoConfig(config) {
    return [
        {
            provide: TRANSLOCO_CONFIG,
            useValue: config,
        },
    ];
}
export function provideTranslocoLoader(loader) {
    return [{ provide: TRANSLOCO_LOADER, useClass: loader }];
}
export function provideTranslocoScope(scope) {
    return [
        {
            provide: TRANSLOCO_SCOPE,
            useValue: scope,
        },
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsb2NvLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdHJhbnNsb2NvL3NyYy9saWIvdHJhbnNsb2NvLnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQW1CLE1BQU0sb0JBQW9CLENBQUM7QUFDdkUsT0FBTyxFQUFFLGdCQUFnQixFQUFtQixNQUFNLG9CQUFvQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUdwRCxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLG9CQUFvQixHQUNyQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFDTCxjQUFjLEVBQ2QseUJBQXlCLEdBQzFCLE1BQU0sNkJBQTZCLENBQUM7QUFDckMsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixxQkFBcUIsR0FDdEIsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLDJCQUEyQixHQUM1QixNQUFNLCtCQUErQixDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHO0lBQzlCO1FBQ0UsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixRQUFRLEVBQUUsaUJBQWlCO1FBQzNCLElBQUksRUFBRSxDQUFDLGdCQUFnQixDQUFDO0tBQ3pCO0lBQ0Q7UUFDRSxPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLFFBQVEsRUFBRSxjQUFjO0tBQ3pCO0lBQ0Q7UUFDRSxPQUFPLEVBQUUscUJBQXFCO1FBQzlCLFFBQVEsRUFBRSxrQkFBa0I7S0FDN0I7SUFDRDtRQUNFLE9BQU8sRUFBRSwyQkFBMkI7UUFDcEMsUUFBUSxFQUFFLHVCQUF1QjtRQUNqQyxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztLQUN6QjtDQUNGLENBQUM7QUFPRixNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBeUI7SUFDeEQsTUFBTSxTQUFTLEdBQWUsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLENBQUM7SUFFcEQsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1FBQ2xCLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUMzRDtJQUVELElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtRQUNsQixTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsc0JBQXNCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDM0Q7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLE1BQXVCO0lBQzVELE9BQU87UUFDTDtZQUNFLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsUUFBUSxFQUFFLE1BQU07U0FDakI7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxNQUE2QjtJQUNsRSxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxLQUFxQjtJQUN6RCxPQUFPO1FBQ0w7WUFDRSxPQUFPLEVBQUUsZUFBZTtZQUN4QixRQUFRLEVBQUUsS0FBSztTQUNoQjtLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXIsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVFJBTlNMT0NPX0xPQURFUiwgVHJhbnNsb2NvTG9hZGVyIH0gZnJvbSAnLi90cmFuc2xvY28ubG9hZGVyJztcbmltcG9ydCB7IFRSQU5TTE9DT19DT05GSUcsIFRyYW5zbG9jb0NvbmZpZyB9IGZyb20gJy4vdHJhbnNsb2NvLmNvbmZpZyc7XG5pbXBvcnQgeyBUUkFOU0xPQ09fU0NPUEUgfSBmcm9tICcuL3RyYW5zbG9jby1zY29wZSc7XG5pbXBvcnQgeyBUcmFuc2xvY29TY29wZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQge1xuICBEZWZhdWx0VHJhbnNwaWxlcixcbiAgVFJBTlNMT0NPX1RSQU5TUElMRVIsXG59IGZyb20gJy4vdHJhbnNsb2NvLnRyYW5zcGlsZXInO1xuaW1wb3J0IHtcbiAgRGVmYXVsdEhhbmRsZXIsXG4gIFRSQU5TTE9DT19NSVNTSU5HX0hBTkRMRVIsXG59IGZyb20gJy4vdHJhbnNsb2NvLW1pc3NpbmctaGFuZGxlcic7XG5pbXBvcnQge1xuICBEZWZhdWx0SW50ZXJjZXB0b3IsXG4gIFRSQU5TTE9DT19JTlRFUkNFUFRPUixcbn0gZnJvbSAnLi90cmFuc2xvY28uaW50ZXJjZXB0b3InO1xuaW1wb3J0IHtcbiAgRGVmYXVsdEZhbGxiYWNrU3RyYXRlZ3ksXG4gIFRSQU5TTE9DT19GQUxMQkFDS19TVFJBVEVHWSxcbn0gZnJvbSAnLi90cmFuc2xvY28tZmFsbGJhY2stc3RyYXRlZ3knO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFByb3ZpZGVycyA9IFtcbiAge1xuICAgIHByb3ZpZGU6IFRSQU5TTE9DT19UUkFOU1BJTEVSLFxuICAgIHVzZUNsYXNzOiBEZWZhdWx0VHJhbnNwaWxlcixcbiAgICBkZXBzOiBbVFJBTlNMT0NPX0NPTkZJR10sXG4gIH0sXG4gIHtcbiAgICBwcm92aWRlOiBUUkFOU0xPQ09fTUlTU0lOR19IQU5ETEVSLFxuICAgIHVzZUNsYXNzOiBEZWZhdWx0SGFuZGxlcixcbiAgfSxcbiAge1xuICAgIHByb3ZpZGU6IFRSQU5TTE9DT19JTlRFUkNFUFRPUixcbiAgICB1c2VDbGFzczogRGVmYXVsdEludGVyY2VwdG9yLFxuICB9LFxuICB7XG4gICAgcHJvdmlkZTogVFJBTlNMT0NPX0ZBTExCQUNLX1NUUkFURUdZLFxuICAgIHVzZUNsYXNzOiBEZWZhdWx0RmFsbGJhY2tTdHJhdGVneSxcbiAgICBkZXBzOiBbVFJBTlNMT0NPX0NPTkZJR10sXG4gIH0sXG5dO1xuXG50eXBlIFRyYW5zbG9jb09wdGlvbnMgPSB7XG4gIGNvbmZpZz86IFRyYW5zbG9jb0NvbmZpZztcbiAgbG9hZGVyPzogVHlwZTxUcmFuc2xvY29Mb2FkZXI+O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVUcmFuc2xvY28ob3B0aW9uczogVHJhbnNsb2NvT3B0aW9ucykge1xuICBjb25zdCBwcm92aWRlcnM6IFByb3ZpZGVyW10gPSBbLi4uZGVmYXVsdFByb3ZpZGVyc107XG5cbiAgaWYgKG9wdGlvbnMuY29uZmlnKSB7XG4gICAgcHJvdmlkZXJzLnB1c2goLi4ucHJvdmlkZVRyYW5zbG9jb0NvbmZpZyhvcHRpb25zLmNvbmZpZykpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMubG9hZGVyKSB7XG4gICAgcHJvdmlkZXJzLnB1c2goLi4ucHJvdmlkZVRyYW5zbG9jb0xvYWRlcihvcHRpb25zLmxvYWRlcikpO1xuICB9XG5cbiAgcmV0dXJuIHByb3ZpZGVycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVUcmFuc2xvY29Db25maWcoY29uZmlnOiBUcmFuc2xvY29Db25maWcpIHtcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBUUkFOU0xPQ09fQ09ORklHLFxuICAgICAgdXNlVmFsdWU6IGNvbmZpZyxcbiAgICB9LFxuICBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVRyYW5zbG9jb0xvYWRlcihsb2FkZXI6IFR5cGU8VHJhbnNsb2NvTG9hZGVyPikge1xuICByZXR1cm4gW3sgcHJvdmlkZTogVFJBTlNMT0NPX0xPQURFUiwgdXNlQ2xhc3M6IGxvYWRlciB9XTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVUcmFuc2xvY29TY29wZShzY29wZTogVHJhbnNsb2NvU2NvcGUpIHtcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBUUkFOU0xPQ09fU0NPUEUsXG4gICAgICB1c2VWYWx1ZTogc2NvcGUsXG4gICAgfSxcbiAgXTtcbn1cbiJdfQ==